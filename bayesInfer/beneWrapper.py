__author__ = "Mehmood Alam Khan"
__email__  = "malagori@kth.se"
__version__= "0.9"
__license__ = "GPL"
__credits__ = ["Mehmood Alam Khan", "Pekka Parviainen"]

import os
import subprocess
from node import Node

class BeneWrapper(object):
    def __init__(self, vdFile, dataFile, score, outDirectory, totalVaiables):
        self.vdFile = vdFile                # variable descriptor file
        self.dataFile = dataFile            # data file
        self.score = score                  # default is 1.0 BDe score alpha parameter
        self.outDirectory = outDirectory    # path to output directory
        self.totalVaiables = totalVaiables  # number of variables

    def checkExe(self, exePath):
        return os.path.isfile(exePath) and os.access(exePath, os.X_OK)
    
    def which(self, program):
        fpath, fname = os.path.split(program)
        if fpath:
            if self.checkExe(program):
                return program
        else:
            for path in os.environ["PATH"].split(os.pathsep):
                path = path.strip('"')
                exe_file = os.path.join(path, program)
                if self.checkExe(exe_file):
                    return exe_file
        return None
    
    def generateOptBnt(self):
        try:
            null = open("/dev/null")
            beneStdOut= os.path.join(self.outDirectory, "bene.stdout")
            benePwd= self.which('data2net.sh')
            print "benePwd: %s" % benePwd
            print "self.vdFile %s" % self.vdFile
            print "self.dataFile %s" % self.dataFile
            print "self.score %s" % self.score
            print "self.outDirectory %s" % self.outDirectory
            
            if benePwd != None:
                subprocess.call([ str(benePwd), str(self.vdFile), str(self.dataFile), str(self.score), str(self.outDirectory)])
        except IOError, e:
            print ("Class: beneWrapper; Function: generateOptBnt();  Error: " + str(e))
            
    def readBeneBnt(self, cardinality):
        """
        Read bayesian network generated by bene software
        """
        # convert decimal to binary. decimalToBinary(x, n) convert x to binary and 
        # represent it in an n-bit representation
        # ['1', '2', '3']
        decimalToBinary = lambda x, n: x >= 0 and str(bin(x))[2:].zfill(n)
        
        
        
        try:
            infile= self.outDirectory+'/'+'net'
            varName=0
            allNodesObj={}
            optDag=[]
            with open(infile) as f:
                for line in f:
                    node=Node()
                    parents=[]
                    varName+=1
                    
                    varParentSet=list(decimalToBinary(line, self.totalVaiables))
                    optDag.append(varParentSet)
                    for i in range(0, len(varParentSet)):
                        if varParentSet[i] == '1':
                            # set parent
                            parents.append(i+1)
                            
                            
                    node.setR(int(cardinality[varName-1]))
                    node.setKvalues(dict.fromkeys(list(range(0, int(cardinality[varName-1]), 1))))
                    node.setName(varName)
                    node.setParents(parents)
                    allNodesObj[varName]=node
            # taking transpose of list of list to get the required dag
            optDag=map(list, zip(*optDag))
            return optDag, allNodesObj
            
            
        except IOError, e:
            print ("Class: beneWrapper; Function: readBeneBnt();  Error: " + str(e))
        